-- *******************************
-- SELECT Îçî ÍπäÏù¥ ÌååÎ≥¥Í∏∞
-- *******************************
-- ÏøºÎ¶¨ ÏïàÏóê ÏÑúÎ∏å ÏøºÎ¶¨

-- *******************************
-- 1. ÎπÑÏÉÅÍ¥Ä ÏÑúÎ∏åÏøºÎ¶¨
SELECT
  CategoryID, CategoryName, Description,
  (SELECT ProductName FROM Products WHERE ProductID = 1)
FROM Categories;

SELECT * FROM Products
WHERE Price < (
  SELECT AVG(Price) FROM Products
);

SELECT
  CategoryID, CategoryName, Description
FROM Categories
WHERE
  CategoryID =
  (SELECT CategoryID FROM Products
  WHERE ProductName = 'Chais');

SELECT
  CategoryID, CategoryName, Description
FROM Categories
WHERE
  CategoryID IN
  (SELECT CategoryID FROM Products
  WHERE Price > 50);

-- ALL ÏÑúÎ∏åÏøºÎ¶¨Ïùò Î™®Îì† Í≤∞Í≥ºÏóê ÎåÄÌï¥ ~ÌïòÎã§
-- ANY ÏÑúÎ∏åÏøºÎ¶¨Ïùò ÌïòÎÇò Ïù¥ÏÉÅÏùò Í≤∞Í≥ºÏóê ÎåÄÌï¥ ~ÌïòÎã§

SELECT * FROM Products
WHERE Price > ALL (
  SELECT Price FROM Products
  WHERE CategoryID = 2
);

SELECT
  CategoryID, CategoryName, Description
FROM Categories
WHERE
  CategoryID = ANY
  (SELECT CategoryID FROM Products
  WHERE Price > 50);

-- *******************************
-- 2. ÏÉÅÍ¥Ä ÏÑúÎ∏åÏøºÎ¶¨
SELECT
  ProductID, ProductName,
  (
    SELECT CategoryName FROM Categories C
    WHERE C.CategoryID = P.CategoryID
  ) AS CategoryName
FROM Products P;

SELECT
  SupplierName, Country, City,
  (
    SELECT COUNT(*) FROM Customers C
    WHERE C.Country = S.Country
  ) AS CustomersInTheCountry,
  (
    SELECT COUNT(*) FROM Customers C
    WHERE C.Country = S.Country 
      AND C.City = S.City
  ) AS CustomersInTheCity
FROM Suppliers S;

SELECT
  CategoryID, CategoryName,
  (
    SELECT MAX(Price) FROM Products P
    WHERE P.CategoryID = C.CategoryID
  ) AS MaximumPrice,
  (
    SELECT AVG(Price) FROM Products P
    WHERE P.CategoryID = C.CategoryID
  ) AS AveragePrice
FROM Categories C;

SELECT
  ProductID, ProductName, CategoryID, Price
  -- ,(SELECT AVG(Price) FROM Products P2
  -- WHERE P2.CategoryID = P1.CategoryID)
FROM Products P1
WHERE Price < (
  SELECT AVG(Price) FROM Products P2
  WHERE P2.CategoryID = P1.CategoryID
);

-- EXISTS / NOT EXISTS Ïó∞ÏÇ∞Ïûê
SELECT
  CategoryID, CategoryName
  -- ,(SELECT MAX(P.Price) FROM Products P
  -- WHERE P.CategoryID = C.CategoryID
  -- ) AS MaxPrice
FROM Categories C
WHERE EXISTS (
  SELECT * FROM Products P
  WHERE P.CategoryID = C.CategoryID
  AND P.Price > 80
);

-- *******************************
-- 3. JOIN(INNER JOIN) - ÎÇ¥Î∂Ä Ï°∞Ïù∏
--ÏñëÏ™Ω Î™®ÎëêÏóê Í∞íÏù¥ ÏûàÎäî Ìñâ(NOT NULL) Î∞òÌôò
--'INNER 'Îäî ÏÑ†ÌÉùÏÇ¨Ìï≠
SELECT * FROM Categories C
JOIN Products P 
  ON C.CategoryID = P.CategoryID; 

SELECT C.CategoryID, C.CategoryName, P.ProductName
FROM Categories C
JOIN Products P 
  ON C.CategoryID = P.CategoryID; 
-- ambiguous Ï£ºÏùò!

SELECT
  CONCAT(
    P.ProductName, ' by ', S.SupplierName
  ) AS Product,
  S.Phone, P.Price
FROM Products P
JOIN Suppliers S
  ON P.SupplierID = S.SupplierID
WHERE Price > 50
ORDER BY ProductName;

--üí° Ïó¨Îü¨ ÌÖåÏù¥Î∏îÏùÑ JOINÌï† Ïàò ÏûàÏäµÎãàÎã§.
SELECT 
  C.CategoryID, C.CategoryName, 
  P.ProductName, 
  O.OrderDate,
  D.Quantity
FROM Categories C
JOIN Products P 
  ON C.CategoryID = P.CategoryID
JOIN OrderDetails D
  ON P.ProductID = D.ProductID
JOIN Orders O
  ON O.OrderID = D.OrderID;

--üí° JOINÌïú ÌÖåÏù¥Î∏î GROUPÌïòÍ∏∞
SELECT 
  C.CategoryName,
  MIN(O.OrderDate) AS FirstOrder,
  MAX(O.OrderDate) AS LastOrder,
  SUM(D.Quantity) AS TotalQuantity
FROM Categories C
JOIN Products P 
  ON C.CategoryID = P.CategoryID
JOIN OrderDetails D
  ON P.ProductID = D.ProductID
JOIN Orders O
  ON O.OrderID = D.OrderID
GROUP BY C.CategoryID;

SELECT 
  C.CategoryName, P.ProductName,
  MIN(O.OrderDate) AS FirstOrder,
  MAX(O.OrderDate) AS LastOrder,
  SUM(D.Quantity) AS TotalQuantity
FROM Categories C
JOIN Products P 
  ON C.CategoryID = P.CategoryID
JOIN OrderDetails D
  ON P.ProductID = D.ProductID
JOIN Orders O
  ON O.OrderID = D.OrderID
GROUP BY C.CategoryID, P.ProductID;


--üí° SELF JOIN - Í∞ôÏùÄ ÌÖåÏù¥Î∏îÎÅºÎ¶¨
SELECT
  E1.EmployeeID, CONCAT_WS(' ', E1.FirstName, E1.LastName) AS Employee,
  E2.EmployeeID, CONCAT_WS(' ', E2.FirstName, E2.LastName) AS NextEmployee
FROM Employees E1 JOIN Employees E2
ON E1.EmployeeID + 1 = E2.EmployeeID;

-- 1Î≤àÏùò Ï†Ñ, ÎßàÏßÄÎßâ Î≤àÌò∏Ïùò Îã§ÏùåÏùÄ?

-- *******************************
-- 4. LEFT/RIGHT OUTER JOIN - Ïô∏Î∂Ä Ï°∞Ïù∏
-- Î∞òÎåÄÏ™ΩÏóê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎì† ÏóÜÎì†(NULL), ÏÑ†ÌÉùÎêú Î∞©Ìñ•Ïóê ÏûàÏúºÎ©¥ Ï∂úÎ†• - Ìñâ Ïàò Í≤∞Ï†ï
-- 'OUTER 'Îäî ÏÑ†ÌÉùÏÇ¨Ìï≠
SELECT
  E1.EmployeeID, CONCAT_WS(' ', E1.FirstName, E1.LastName) AS Employee,
  E2.EmployeeID, CONCAT_WS(' ', E2.FirstName, E2.LastName) AS NextEmployee
FROM Employees E1
LEFT JOIN Employees E2
ON E1.EmployeeID + 1 = E2.EmployeeID
ORDER BY E1.EmployeeID;

-- LEFTÎ•º RIGHTÎ°ú Î∞îÍøîÏÑúÎèÑ Ïã§ÌñâÌï¥ Î≥º Í≤É

SELECT
  C.CustomerName, S.SupplierName,
  C.City, C.Country
FROM Customers C
LEFT JOIN Suppliers S
ON C.City = S.City AND C.Country = S.Country;

-- LEFTÎ•º RIGHTÎ°ú Î∞îÍøîÏÑúÎèÑ Ïã§ÌñâÌï¥ Î≥º Í≤É

SELECT
  IFNULL(C.CustomerName, '-- NO CUSTOMER --'),
  IFNULL(S.SupplierName, '-- NO SUPPLIER --'),
  IFNULL(C.City, S.City),
  IFNULL(C.Country, S.Country)
FROM Customers C
LEFT JOIN Suppliers S
ON C.City = S.City AND C.Country = S.Country;

-- LEFTÎ•º RIGHTÎ°ú Î∞îÍøîÏÑúÎèÑ Ïã§ÌñâÌï¥ Î≥º Í≤É

-- *******************************
-- 5. CROSS JOIN - ÍµêÏ∞® Ï°∞Ïù∏
-- Ï°∞Í±¥ ÏóÜÏù¥ Î™®Îì† Ï°∞Ìï© Î∞òÌôò(A * B)

SELECT
  E1.LastName, E2.FirstName
FROM Employees E1
CROSS JOIN Employees E2
ORDER BY E1.EmployeeID;

-- *******************************
-- 6, ÏßëÌï© (Ìï©ÏßëÌï© / ÍµêÏßëÌï© / Ï∞®ÏßëÌï© / ÎåÄÏπ≠ Ï∞®ÏßëÌï©)
-- UNION Ï§ëÎ≥µ Ï†úÍ±∞Ìïú ÏßëÌï© / UNION ALL Ï§ëÎ≥µÏùÑ Ï†úÍ±∞ÌïòÏßÄ ÏïäÏùÄ ÏßëÌï©
SELECT CustomerName AS Name, City, Country, 'CUSTOMER'
FROM Customers
UNION
SELECT SupplierName AS Name, City, Country, 'SUPPLIER'
FROM Suppliers
ORDER BY Name;

-- Ìï©ÏßëÌï©
SELECT CategoryID AS ID FROM Categories
WHERE CategoryID > 4
UNION
SELECT EmployeeID AS ID FROM Employees
WHERE EmployeeID % 2 = 0;

-- UNION ALLÎ°ú Î∞îÍøîÎ≥º Í≤É


--ÍµêÏßëÌï©
SELECT CategoryID AS ID
FROM Categories C, Employees E
WHERE 
  C.CategoryID > 4
  AND E.EmployeeID % 2 = 0
  AND C.CategoryID = E.EmployeeID;

--Ï∞®ÏßëÌï©
SELECT CategoryID AS ID
FROM Categories
WHERE 
  CategoryID > 4
  AND CategoryID NOT IN (
    SELECT EmployeeID
    FROM Employees
    WHERE EmployeeID % 2 = 0
  );

  -- ÎåÄÏπ≠Ï∞®ÏßëÌï© (Ìï©ÏßëÌï© - ÍµêÏßëÌï©)
  SELECT ID FROM (
  SELECT CategoryID AS ID FROM Categories
  WHERE CategoryID > 4
  UNION ALL
  SELECT EmployeeID AS ID FROM Employees
  WHERE EmployeeID % 2 = 0
) AS Temp 
GROUP BY ID HAVING COUNT(*) = 1;